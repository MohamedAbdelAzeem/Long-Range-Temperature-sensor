
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00000906  0000097a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000906  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000098e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009c0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000a00  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f48  00000000  00000000  00000a60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000080a  00000000  00000000  000019a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000575  00000000  00000000  000021b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  00002728  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000473  00000000  00000000  00002808  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000764  00000000  00000000  00002c7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  000033df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e0       	ldi	r30, 0x06	; 6
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 31       	cpi	r26, 0x14	; 20
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 11 01 	call	0x222	; 0x222 <main>
  8e:	0c 94 81 04 	jmp	0x902	; 0x902 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <LCD_cmd>:
	}
	if(x_pos < 16)
	{
		address += x_pos ;
	}
	LCD_cmd(address);
  96:	85 b9       	out	0x05, r24	; 5
  98:	5e 98       	cbi	0x0b, 6	; 11
  9a:	5d 98       	cbi	0x0b, 5	; 11
  9c:	5c 9a       	sbi	0x0b, 4	; 11
  9e:	83 ef       	ldi	r24, 0xF3	; 243
  a0:	91 e0       	ldi	r25, 0x01	; 1
  a2:	01 97       	sbiw	r24, 0x01	; 1
  a4:	f1 f7       	brne	.-4      	; 0xa2 <LCD_cmd+0xc>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <LCD_cmd+0x12>
  a8:	00 00       	nop
  aa:	5c 98       	cbi	0x0b, 4	; 11
  ac:	08 95       	ret

000000ae <init_LCD>:
  ae:	8b e4       	ldi	r24, 0x4B	; 75
  b0:	9d e1       	ldi	r25, 0x1D	; 29
  b2:	01 97       	sbiw	r24, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <init_LCD+0x4>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <init_LCD+0xa>
  b8:	00 00       	nop
  ba:	88 e3       	ldi	r24, 0x38	; 56
  bc:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_cmd>
  c0:	89 ef       	ldi	r24, 0xF9	; 249
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	01 97       	sbiw	r24, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <init_LCD+0x16>
  c8:	00 c0       	rjmp	.+0      	; 0xca <init_LCD+0x1c>
  ca:	00 00       	nop
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_cmd>
  d2:	89 ef       	ldi	r24, 0xF9	; 249
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <init_LCD+0x28>
  da:	00 c0       	rjmp	.+0      	; 0xdc <init_LCD+0x2e>
  dc:	00 00       	nop
  de:	82 e0       	ldi	r24, 0x02	; 2
  e0:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_cmd>
  e4:	89 ef       	ldi	r24, 0xF9	; 249
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <init_LCD+0x3a>
  ec:	00 c0       	rjmp	.+0      	; 0xee <init_LCD+0x40>
  ee:	00 00       	nop
  f0:	86 e0       	ldi	r24, 0x06	; 6
  f2:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_cmd>
  f6:	89 ef       	ldi	r24, 0xF9	; 249
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	01 97       	sbiw	r24, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <init_LCD+0x4c>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <init_LCD+0x52>
 100:	00 00       	nop
 102:	80 e8       	ldi	r24, 0x80	; 128
 104:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_cmd>
 108:	89 ef       	ldi	r24, 0xF9	; 249
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <init_LCD+0x5e>
 110:	00 c0       	rjmp	.+0      	; 0x112 <init_LCD+0x64>
 112:	00 00       	nop
 114:	08 95       	ret

00000116 <LCD_write>:
 116:	85 b9       	out	0x05, r24	; 5
 118:	5e 9a       	sbi	0x0b, 6	; 11
 11a:	5d 98       	cbi	0x0b, 5	; 11
 11c:	5c 9a       	sbi	0x0b, 4	; 11
 11e:	83 ef       	ldi	r24, 0xF3	; 243
 120:	91 e0       	ldi	r25, 0x01	; 1
 122:	01 97       	sbiw	r24, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <LCD_write+0xc>
 126:	00 c0       	rjmp	.+0      	; 0x128 <LCD_write+0x12>
 128:	00 00       	nop
 12a:	5c 98       	cbi	0x0b, 4	; 11
 12c:	08 95       	ret

0000012e <LCD_write_str>:
 12e:	cf 93       	push	r28
 130:	df 93       	push	r29
 132:	ec 01       	movw	r28, r24
 134:	88 81       	ld	r24, Y
 136:	88 23       	and	r24, r24
 138:	31 f0       	breq	.+12     	; 0x146 <LCD_write_str+0x18>
 13a:	21 96       	adiw	r28, 0x01	; 1
 13c:	0e 94 8b 00 	call	0x116	; 0x116 <LCD_write>
 140:	89 91       	ld	r24, Y+
 142:	81 11       	cpse	r24, r1
 144:	fb cf       	rjmp	.-10     	; 0x13c <LCD_write_str+0xe>
 146:	df 91       	pop	r29
 148:	cf 91       	pop	r28
 14a:	08 95       	ret

0000014c <init_ADC>:
}

void init_ADC(void){
	ADMUX |= (1<<REFS0);    //setting voltage ref = Vcc 
 14c:	ec e7       	ldi	r30, 0x7C	; 124
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	80 64       	ori	r24, 0x40	; 64
 154:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN);    // Turn ADC ON
 156:	ea e7       	ldi	r30, 0x7A	; 122
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	80 68       	ori	r24, 0x80	; 128
 15e:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC) ; 
 160:	80 81       	ld	r24, Z
 162:	80 64       	ori	r24, 0x40	; 64
 164:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADPS2) |(1<<ADPS1)|(1<<ADPS0);
 166:	80 81       	ld	r24, Z
 168:	87 60       	ori	r24, 0x07	; 7
 16a:	80 83       	st	Z, r24
 16c:	08 95       	ret

0000016e <ADC_Read>:
}

uint16_t ADC_Read(uint8_t channel){
	ADMUX &= 0xF0;     // clear the older channel before any new conversion 
 16e:	ec e7       	ldi	r30, 0x7C	; 124
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	90 81       	ld	r25, Z
 174:	90 7f       	andi	r25, 0xF0	; 240
 176:	90 83       	st	Z, r25
	ADMUX |= channel    ;     // defines the new ADC channel for the new reading
 178:	90 81       	ld	r25, Z
 17a:	89 2b       	or	r24, r25
 17c:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);    // ADC must be Enabled  for every single conversion  (start new conversion)
 17e:	ea e7       	ldi	r30, 0x7A	; 122
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	80 81       	ld	r24, Z
 184:	80 64       	ori	r24, 0x40	; 64
 186:	80 83       	st	Z, r24
	while(ADCSRA & (1<<ADSC));  //WAIt until conversion is done
 188:	80 81       	ld	r24, Z
 18a:	86 fd       	sbrc	r24, 6
 18c:	fd cf       	rjmp	.-6      	; 0x188 <ADC_Read+0x1a>
	return ADC;
 18e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 192:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
}
 196:	08 95       	ret

00000198 <temp_avg>:

void temp_avg(int *readings, int *temp_sum)
{
 198:	0f 93       	push	r16
 19a:	1f 93       	push	r17
 19c:	cf 93       	push	r28
 19e:	df 93       	push	r29
 1a0:	cd b7       	in	r28, 0x3d	; 61
 1a2:	de b7       	in	r29, 0x3e	; 62
 1a4:	28 97       	sbiw	r28, 0x08	; 8
 1a6:	0f b6       	in	r0, 0x3f	; 63
 1a8:	f8 94       	cli
 1aa:	de bf       	out	0x3e, r29	; 62
 1ac:	0f be       	out	0x3f, r0	; 63
 1ae:	cd bf       	out	0x3d, r28	; 61
 1b0:	db 01       	movw	r26, r22
	int temp_avg = 0;
	char num2[8] = {0};  //An array to hold the characters of the num
 1b2:	ae 01       	movw	r20, r28
 1b4:	4f 5f       	subi	r20, 0xFF	; 255
 1b6:	5f 4f       	sbci	r21, 0xFF	; 255
 1b8:	28 e0       	ldi	r18, 0x08	; 8
 1ba:	fa 01       	movw	r30, r20
 1bc:	11 92       	st	Z+, r1
 1be:	2a 95       	dec	r18
 1c0:	e9 f7       	brne	.-6      	; 0x1bc <temp_avg+0x24>
 1c2:	fc 01       	movw	r30, r24
 1c4:	88 58       	subi	r24, 0x88	; 136
 1c6:	9f 4f       	sbci	r25, 0xFF	; 255
	for (uint8_t i= 0 ; i <= 59 ;i++)
	{
		*temp_sum += readings[i];
 1c8:	01 91       	ld	r16, Z+
 1ca:	11 91       	ld	r17, Z+
 1cc:	2d 91       	ld	r18, X+
 1ce:	3c 91       	ld	r19, X
 1d0:	11 97       	sbiw	r26, 0x01	; 1
 1d2:	02 0f       	add	r16, r18
 1d4:	13 1f       	adc	r17, r19
 1d6:	11 96       	adiw	r26, 0x01	; 1
 1d8:	1c 93       	st	X, r17
 1da:	0e 93       	st	-X, r16

void temp_avg(int *readings, int *temp_sum)
{
	int temp_avg = 0;
	char num2[8] = {0};  //An array to hold the characters of the num
	for (uint8_t i= 0 ; i <= 59 ;i++)
 1dc:	e8 17       	cp	r30, r24
 1de:	f9 07       	cpc	r31, r25
 1e0:	99 f7       	brne	.-26     	; 0x1c8 <temp_avg+0x30>
	{
		*temp_sum += readings[i];
	}
	temp_avg = *temp_sum / 60;
	//Printing the avg
	LCD_write_str("Temp_avg:");
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	91 e0       	ldi	r25, 0x01	; 1
 1e6:	0e 94 97 00 	call	0x12e	; 0x12e <LCD_write_str>
	itoa((int)temp_avg, num2 , 10);
 1ea:	c8 01       	movw	r24, r16
 1ec:	6c e3       	ldi	r22, 0x3C	; 60
 1ee:	70 e0       	ldi	r23, 0x00	; 0
 1f0:	0e 94 19 04 	call	0x832	; 0x832 <__divmodhi4>
 1f4:	cb 01       	movw	r24, r22
 1f6:	4a e0       	ldi	r20, 0x0A	; 10
 1f8:	50 e0       	ldi	r21, 0x00	; 0
 1fa:	be 01       	movw	r22, r28
 1fc:	6f 5f       	subi	r22, 0xFF	; 255
 1fe:	7f 4f       	sbci	r23, 0xFF	; 255
 200:	0e 94 41 04 	call	0x882	; 0x882 <itoa>
	LCD_write_str(num2);
 204:	ce 01       	movw	r24, r28
 206:	01 96       	adiw	r24, 0x01	; 1
 208:	0e 94 97 00 	call	0x12e	; 0x12e <LCD_write_str>
	
 20c:	28 96       	adiw	r28, 0x08	; 8
 20e:	0f b6       	in	r0, 0x3f	; 63
 210:	f8 94       	cli
 212:	de bf       	out	0x3e, r29	; 62
 214:	0f be       	out	0x3f, r0	; 63
 216:	cd bf       	out	0x3d, r28	; 61
 218:	df 91       	pop	r29
 21a:	cf 91       	pop	r28
 21c:	1f 91       	pop	r17
 21e:	0f 91       	pop	r16
 220:	08 95       	ret

00000222 <main>:




int main(void)
{
 222:	cf 93       	push	r28
 224:	df 93       	push	r29
 226:	cd b7       	in	r28, 0x3d	; 61
 228:	de b7       	in	r29, 0x3e	; 62
 22a:	c2 58       	subi	r28, 0x82	; 130
 22c:	d1 09       	sbc	r29, r1
 22e:	0f b6       	in	r0, 0x3f	; 63
 230:	f8 94       	cli
 232:	de bf       	out	0x3e, r29	; 62
 234:	0f be       	out	0x3f, r0	; 63
 236:	cd bf       	out	0x3d, r28	; 61
	DDRB = 0xFF; // Port B set as output
 238:	8f ef       	ldi	r24, 0xFF	; 255
 23a:	84 b9       	out	0x04, r24	; 4
	DDRD = 0xFF; // port D set as output
 23c:	8a b9       	out	0x0a, r24	; 10
	DDRC = 0X00;  // PORT C set as input
 23e:	17 b8       	out	0x07, r1	; 7
		
	float data_read;
	double temp_volt;
	int temp_sum = 0 ;
 240:	1a 82       	std	Y+2, r1	; 0x02
 242:	19 82       	std	Y+1, r1	; 0x01
	int temp;
	int readings[60]={0};
 244:	fe 01       	movw	r30, r28
 246:	33 96       	adiw	r30, 0x03	; 3
 248:	88 e7       	ldi	r24, 0x78	; 120
 24a:	df 01       	movw	r26, r30
 24c:	1d 92       	st	X+, r1
 24e:	8a 95       	dec	r24
 250:	e9 f7       	brne	.-6      	; 0x24c <main+0x2a>
	int seconds = 0;
	bool flag = false;
	
	init_LCD();   // initialize LCD 
 252:	0e 94 57 00 	call	0xae	; 0xae <init_LCD>
	init_ADC();   // initialize ADC
 256:	0e 94 a6 00 	call	0x14c	; 0x14c <init_ADC>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 25a:	e7 ea       	ldi	r30, 0xA7	; 167
 25c:	f1 e6       	ldi	r31, 0x61	; 97
 25e:	31 97       	sbiw	r30, 0x01	; 1
 260:	f1 f7       	brne	.-4      	; 0x25e <main+0x3c>
 262:	00 c0       	rjmp	.+0      	; 0x264 <main+0x42>
 264:	00 00       	nop
	_delay_ms(100);
	
	LCD_cmd(0x0E);  // Display ON , Cursor ON
 266:	8e e0       	ldi	r24, 0x0E	; 14
 268:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_cmd>
 26c:	87 ea       	ldi	r24, 0xA7	; 167
 26e:	91 e6       	ldi	r25, 0x61	; 97
 270:	01 97       	sbiw	r24, 0x01	; 1
 272:	f1 f7       	brne	.-4      	; 0x270 <main+0x4e>
 274:	00 c0       	rjmp	.+0      	; 0x276 <main+0x54>
 276:	00 00       	nop
	double temp_volt;
	int temp_sum = 0 ;
	int temp;
	int readings[60]={0};
	int seconds = 0;
	bool flag = false;
 278:	91 2c       	mov	r9, r1
	float data_read;
	double temp_volt;
	int temp_sum = 0 ;
	int temp;
	int readings[60]={0};
	int seconds = 0;
 27a:	e1 2c       	mov	r14, r1
 27c:	f1 2c       	mov	r15, r1
	_delay_ms(100);
	

    while (1) 
    {		
		char num[8] ={0};
 27e:	8e 01       	movw	r16, r28
 280:	05 58       	subi	r16, 0x85	; 133
 282:	1f 4f       	sbci	r17, 0xFF	; 255
 284:	68 94       	set
 286:	aa 24       	eor	r10, r10
 288:	a3 f8       	bld	r10, 3
		if(seconds == 59)
		{
			// calculate the avg and print it
			readings[seconds]= temp ;
			seconds = 0;
			flag = true;
 28a:	bb 24       	eor	r11, r11
 28c:	b3 94       	inc	r11
	_delay_ms(100);
	

    while (1) 
    {		
		char num[8] ={0};
 28e:	d8 01       	movw	r26, r16
 290:	ea 2d       	mov	r30, r10
 292:	1d 92       	st	X+, r1
 294:	ea 95       	dec	r30
 296:	e9 f7       	brne	.-6      	; 0x292 <main+0x70>
		// taking reading from Pin 0 through the ADC.
		data_read = ADC_Read(0);   //this var should take a value from 0 to 1023 (10 bit ADC).
 298:	80 e0       	ldi	r24, 0x00	; 0
 29a:	0e 94 b7 00 	call	0x16e	; 0x16e <ADC_Read>
		temp_volt = data_read*5/1023;  // this value is a voltage in range (0-5) corresponding to a certain temp 
		temp = temp_volt * (27000/481) + (37080/481)+1; 
 29e:	bc 01       	movw	r22, r24
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	0e 94 1e 03 	call	0x63c	; 0x63c <__floatunsisf>
 2a8:	20 e0       	ldi	r18, 0x00	; 0
 2aa:	30 e0       	ldi	r19, 0x00	; 0
 2ac:	40 ea       	ldi	r20, 0xA0	; 160
 2ae:	50 e4       	ldi	r21, 0x40	; 64
 2b0:	0e 94 ac 03 	call	0x758	; 0x758 <__mulsf3>
 2b4:	20 e0       	ldi	r18, 0x00	; 0
 2b6:	30 ec       	ldi	r19, 0xC0	; 192
 2b8:	4f e7       	ldi	r20, 0x7F	; 127
 2ba:	54 e4       	ldi	r21, 0x44	; 68
 2bc:	0e 94 76 02 	call	0x4ec	; 0x4ec <__divsf3>
 2c0:	20 e0       	ldi	r18, 0x00	; 0
 2c2:	30 e0       	ldi	r19, 0x00	; 0
 2c4:	40 e6       	ldi	r20, 0x60	; 96
 2c6:	52 e4       	ldi	r21, 0x42	; 66
 2c8:	0e 94 ac 03 	call	0x758	; 0x758 <__mulsf3>
 2cc:	20 e0       	ldi	r18, 0x00	; 0
 2ce:	30 e0       	ldi	r19, 0x00	; 0
 2d0:	4a e9       	ldi	r20, 0x9A	; 154
 2d2:	52 e4       	ldi	r21, 0x42	; 66
 2d4:	0e 94 0a 02 	call	0x414	; 0x414 <__addsf3>
 2d8:	20 e0       	ldi	r18, 0x00	; 0
 2da:	30 e0       	ldi	r19, 0x00	; 0
 2dc:	40 e8       	ldi	r20, 0x80	; 128
 2de:	5f e3       	ldi	r21, 0x3F	; 63
 2e0:	0e 94 0a 02 	call	0x414	; 0x414 <__addsf3>
 2e4:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <__fixsfsi>
 2e8:	2b 01       	movw	r4, r22
 2ea:	3c 01       	movw	r6, r24
 2ec:	6b 01       	movw	r12, r22
		// alarm detection
		if( temp >= 350)
 2ee:	6e 35       	cpi	r22, 0x5E	; 94
 2f0:	71 40       	sbci	r23, 0x01	; 1
 2f2:	14 f0       	brlt	.+4      	; 0x2f8 <main+0xd6>
		{
			PORTD |= (1<<PIND2); //Put 1 on the output pin: Port D pin 2
 2f4:	5a 9a       	sbi	0x0b, 2	; 11
 2f6:	01 c0       	rjmp	.+2      	; 0x2fa <main+0xd8>
		}
		else
		{
			PORTD &= ~(1 <<PIND2);//Put 0 on the output pin: Port D pin 2
 2f8:	5a 98       	cbi	0x0b, 2	; 11
		}
		if( seconds ==0){
 2fa:	e1 14       	cp	r14, r1
 2fc:	f1 04       	cpc	r15, r1
 2fe:	11 f5       	brne	.+68     	; 0x344 <main+0x122>
			temp++;
 300:	62 01       	movw	r12, r4
 302:	2f ef       	ldi	r18, 0xFF	; 255
 304:	c2 1a       	sub	r12, r18
 306:	d2 0a       	sbc	r13, r18
		}
		/* first line in the LCD */
		
		LCD_write_str("Current:");  // data sent converted to ascii code  total delay= 102ms * num of character
 308:	8a e0       	ldi	r24, 0x0A	; 10
 30a:	91 e0       	ldi	r25, 0x01	; 1
 30c:	0e 94 97 00 	call	0x12e	; 0x12e <LCD_write_str>
		itoa(temp, num , 10) ;      // convert the temp to an array of characters
 310:	4a e0       	ldi	r20, 0x0A	; 10
 312:	50 e0       	ldi	r21, 0x00	; 0
 314:	b8 01       	movw	r22, r16
 316:	c6 01       	movw	r24, r12
 318:	0e 94 41 04 	call	0x882	; 0x882 <itoa>
		LCD_write_str(num);		//print the string on the LCD
 31c:	c8 01       	movw	r24, r16
 31e:	0e 94 97 00 	call	0x12e	; 0x12e <LCD_write_str>
		LCD_write(' ');		
 322:	80 e2       	ldi	r24, 0x20	; 32
 324:	0e 94 8b 00 	call	0x116	; 0x116 <LCD_write>
		itoa(seconds, num , 10) ;
 328:	4a e0       	ldi	r20, 0x0A	; 10
 32a:	50 e0       	ldi	r21, 0x00	; 0
 32c:	b8 01       	movw	r22, r16
 32e:	80 e0       	ldi	r24, 0x00	; 0
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	0e 94 41 04 	call	0x882	; 0x882 <itoa>
		LCD_write_str(num);			//Printing seconds indicator 
 336:	c8 01       	movw	r24, r16
 338:	0e 94 97 00 	call	0x12e	; 0x12e <LCD_write_str>
	}
	if(x_pos < 16)
	{
		address += x_pos ;
	}
	LCD_cmd(address);
 33c:	80 ec       	ldi	r24, 0xC0	; 192
 33e:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_cmd>
 342:	2f c0       	rjmp	.+94     	; 0x3a2 <main+0x180>
		if( seconds ==0){
			temp++;
		}
		/* first line in the LCD */
		
		LCD_write_str("Current:");  // data sent converted to ascii code  total delay= 102ms * num of character
 344:	8a e0       	ldi	r24, 0x0A	; 10
 346:	91 e0       	ldi	r25, 0x01	; 1
 348:	0e 94 97 00 	call	0x12e	; 0x12e <LCD_write_str>
		itoa(temp, num , 10) ;      // convert the temp to an array of characters
 34c:	4a e0       	ldi	r20, 0x0A	; 10
 34e:	50 e0       	ldi	r21, 0x00	; 0
 350:	b8 01       	movw	r22, r16
 352:	c2 01       	movw	r24, r4
 354:	0e 94 41 04 	call	0x882	; 0x882 <itoa>
		LCD_write_str(num);		//print the string on the LCD
 358:	c8 01       	movw	r24, r16
 35a:	0e 94 97 00 	call	0x12e	; 0x12e <LCD_write_str>
		LCD_write(' ');		
 35e:	80 e2       	ldi	r24, 0x20	; 32
 360:	0e 94 8b 00 	call	0x116	; 0x116 <LCD_write>
		itoa(seconds, num , 10) ;
 364:	4a e0       	ldi	r20, 0x0A	; 10
 366:	50 e0       	ldi	r21, 0x00	; 0
 368:	b8 01       	movw	r22, r16
 36a:	c7 01       	movw	r24, r14
 36c:	0e 94 41 04 	call	0x882	; 0x882 <itoa>
		LCD_write_str(num);			//Printing seconds indicator 
 370:	c8 01       	movw	r24, r16
 372:	0e 94 97 00 	call	0x12e	; 0x12e <LCD_write_str>
	}
	if(x_pos < 16)
	{
		address += x_pos ;
	}
	LCD_cmd(address);
 376:	80 ec       	ldi	r24, 0xC0	; 192
 378:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_cmd>
		itoa(seconds, num , 10) ;
		LCD_write_str(num);			//Printing seconds indicator 
				
		// move to the second line
		cursor_position(0,1);
		if(seconds == 59)
 37c:	8b e3       	ldi	r24, 0x3B	; 59
 37e:	e8 16       	cp	r14, r24
 380:	f1 04       	cpc	r15, r1
 382:	79 f4       	brne	.+30     	; 0x3a2 <main+0x180>
		{
			// calculate the avg and print it
			readings[seconds]= temp ;
 384:	eb 96       	adiw	r28, 0x3b	; 59
 386:	5f ae       	std	Y+63, r5	; 0x3f
 388:	4e ae       	std	Y+62, r4	; 0x3e
 38a:	eb 97       	sbiw	r28, 0x3b	; 59
			seconds = 0;
			flag = true;
			temp_avg(readings, &temp_sum);
 38c:	be 01       	movw	r22, r28
 38e:	6f 5f       	subi	r22, 0xFF	; 255
 390:	7f 4f       	sbci	r23, 0xFF	; 255
 392:	ce 01       	movw	r24, r28
 394:	03 96       	adiw	r24, 0x03	; 3
 396:	0e 94 cc 00 	call	0x198	; 0x198 <temp_avg>
		if(seconds == 59)
		{
			// calculate the avg and print it
			readings[seconds]= temp ;
			seconds = 0;
			flag = true;
 39a:	9b 2c       	mov	r9, r11
		cursor_position(0,1);
		if(seconds == 59)
		{
			// calculate the avg and print it
			readings[seconds]= temp ;
			seconds = 0;
 39c:	e1 2c       	mov	r14, r1
 39e:	f1 2c       	mov	r15, r1
 3a0:	26 c0       	rjmp	.+76     	; 0x3ee <main+0x1cc>
			flag = true;
			temp_avg(readings, &temp_sum);
		}
		else if (flag)
 3a2:	99 20       	and	r9, r9
 3a4:	b1 f0       	breq	.+44     	; 0x3d2 <main+0x1b0>
		{
			readings[seconds]= temp;
 3a6:	f7 01       	movw	r30, r14
 3a8:	ee 0f       	add	r30, r30
 3aa:	ff 1f       	adc	r31, r31
 3ac:	a1 e0       	ldi	r26, 0x01	; 1
 3ae:	b0 e0       	ldi	r27, 0x00	; 0
 3b0:	ac 0f       	add	r26, r28
 3b2:	bd 1f       	adc	r27, r29
 3b4:	ea 0f       	add	r30, r26
 3b6:	fb 1f       	adc	r31, r27
 3b8:	d3 82       	std	Z+3, r13	; 0x03
 3ba:	c2 82       	std	Z+2, r12	; 0x02
			seconds++;
 3bc:	bf ef       	ldi	r27, 0xFF	; 255
 3be:	eb 1a       	sub	r14, r27
 3c0:	fb 0a       	sbc	r15, r27
			temp_avg(readings, &temp_sum);
 3c2:	be 01       	movw	r22, r28
 3c4:	6f 5f       	subi	r22, 0xFF	; 255
 3c6:	7f 4f       	sbci	r23, 0xFF	; 255
 3c8:	ce 01       	movw	r24, r28
 3ca:	03 96       	adiw	r24, 0x03	; 3
 3cc:	0e 94 cc 00 	call	0x198	; 0x198 <temp_avg>
 3d0:	0e c0       	rjmp	.+28     	; 0x3ee <main+0x1cc>
		}
		else if (flag == false)
		{
			readings[seconds]= temp;
 3d2:	f7 01       	movw	r30, r14
 3d4:	ee 0f       	add	r30, r30
 3d6:	ff 1f       	adc	r31, r31
 3d8:	81 e0       	ldi	r24, 0x01	; 1
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	8c 0f       	add	r24, r28
 3de:	9d 1f       	adc	r25, r29
 3e0:	e8 0f       	add	r30, r24
 3e2:	f9 1f       	adc	r31, r25
 3e4:	d3 82       	std	Z+3, r13	; 0x03
 3e6:	c2 82       	std	Z+2, r12	; 0x02
			seconds++;
 3e8:	9f ef       	ldi	r25, 0xFF	; 255
 3ea:	e9 1a       	sub	r14, r25
 3ec:	f9 0a       	sbc	r15, r25
		}
		temp_sum = 0;
 3ee:	1a 82       	std	Y+2, r1	; 0x02
 3f0:	19 82       	std	Y+1, r1	; 0x01
		LCD_cmd(0x0E);  // Display ON
 3f2:	8e e0       	ldi	r24, 0x0E	; 14
 3f4:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_cmd>
 3f8:	af e3       	ldi	r26, 0x3F	; 63
 3fa:	bd e0       	ldi	r27, 0x0D	; 13
 3fc:	e3 e0       	ldi	r30, 0x03	; 3
 3fe:	a1 50       	subi	r26, 0x01	; 1
 400:	b0 40       	sbci	r27, 0x00	; 0
 402:	e0 40       	sbci	r30, 0x00	; 0
 404:	e1 f7       	brne	.-8      	; 0x3fe <main+0x1dc>
 406:	00 c0       	rjmp	.+0      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 408:	00 00       	nop
		_delay_ms(1000); 
		LCD_cmd(0x01); // LCD clear
 40a:	8b 2d       	mov	r24, r11
 40c:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_cmd>

    }
 410:	3e cf       	rjmp	.-388    	; 0x28e <main+0x6c>

00000412 <__subsf3>:
 412:	50 58       	subi	r21, 0x80	; 128

00000414 <__addsf3>:
 414:	bb 27       	eor	r27, r27
 416:	aa 27       	eor	r26, r26
 418:	0e 94 21 02 	call	0x442	; 0x442 <__addsf3x>
 41c:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__fp_round>
 420:	0e 94 64 03 	call	0x6c8	; 0x6c8 <__fp_pscA>
 424:	38 f0       	brcs	.+14     	; 0x434 <__addsf3+0x20>
 426:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <__fp_pscB>
 42a:	20 f0       	brcs	.+8      	; 0x434 <__addsf3+0x20>
 42c:	39 f4       	brne	.+14     	; 0x43c <__addsf3+0x28>
 42e:	9f 3f       	cpi	r25, 0xFF	; 255
 430:	19 f4       	brne	.+6      	; 0x438 <__addsf3+0x24>
 432:	26 f4       	brtc	.+8      	; 0x43c <__addsf3+0x28>
 434:	0c 94 61 03 	jmp	0x6c2	; 0x6c2 <__fp_nan>
 438:	0e f4       	brtc	.+2      	; 0x43c <__addsf3+0x28>
 43a:	e0 95       	com	r30
 43c:	e7 fb       	bst	r30, 7
 43e:	0c 94 5b 03 	jmp	0x6b6	; 0x6b6 <__fp_inf>

00000442 <__addsf3x>:
 442:	e9 2f       	mov	r30, r25
 444:	0e 94 83 03 	call	0x706	; 0x706 <__fp_split3>
 448:	58 f3       	brcs	.-42     	; 0x420 <__addsf3+0xc>
 44a:	ba 17       	cp	r27, r26
 44c:	62 07       	cpc	r22, r18
 44e:	73 07       	cpc	r23, r19
 450:	84 07       	cpc	r24, r20
 452:	95 07       	cpc	r25, r21
 454:	20 f0       	brcs	.+8      	; 0x45e <__addsf3x+0x1c>
 456:	79 f4       	brne	.+30     	; 0x476 <__addsf3x+0x34>
 458:	a6 f5       	brtc	.+104    	; 0x4c2 <__addsf3x+0x80>
 45a:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__fp_zero>
 45e:	0e f4       	brtc	.+2      	; 0x462 <__addsf3x+0x20>
 460:	e0 95       	com	r30
 462:	0b 2e       	mov	r0, r27
 464:	ba 2f       	mov	r27, r26
 466:	a0 2d       	mov	r26, r0
 468:	0b 01       	movw	r0, r22
 46a:	b9 01       	movw	r22, r18
 46c:	90 01       	movw	r18, r0
 46e:	0c 01       	movw	r0, r24
 470:	ca 01       	movw	r24, r20
 472:	a0 01       	movw	r20, r0
 474:	11 24       	eor	r1, r1
 476:	ff 27       	eor	r31, r31
 478:	59 1b       	sub	r21, r25
 47a:	99 f0       	breq	.+38     	; 0x4a2 <__addsf3x+0x60>
 47c:	59 3f       	cpi	r21, 0xF9	; 249
 47e:	50 f4       	brcc	.+20     	; 0x494 <__addsf3x+0x52>
 480:	50 3e       	cpi	r21, 0xE0	; 224
 482:	68 f1       	brcs	.+90     	; 0x4de <__addsf3x+0x9c>
 484:	1a 16       	cp	r1, r26
 486:	f0 40       	sbci	r31, 0x00	; 0
 488:	a2 2f       	mov	r26, r18
 48a:	23 2f       	mov	r18, r19
 48c:	34 2f       	mov	r19, r20
 48e:	44 27       	eor	r20, r20
 490:	58 5f       	subi	r21, 0xF8	; 248
 492:	f3 cf       	rjmp	.-26     	; 0x47a <__addsf3x+0x38>
 494:	46 95       	lsr	r20
 496:	37 95       	ror	r19
 498:	27 95       	ror	r18
 49a:	a7 95       	ror	r26
 49c:	f0 40       	sbci	r31, 0x00	; 0
 49e:	53 95       	inc	r21
 4a0:	c9 f7       	brne	.-14     	; 0x494 <__addsf3x+0x52>
 4a2:	7e f4       	brtc	.+30     	; 0x4c2 <__addsf3x+0x80>
 4a4:	1f 16       	cp	r1, r31
 4a6:	ba 0b       	sbc	r27, r26
 4a8:	62 0b       	sbc	r22, r18
 4aa:	73 0b       	sbc	r23, r19
 4ac:	84 0b       	sbc	r24, r20
 4ae:	ba f0       	brmi	.+46     	; 0x4de <__addsf3x+0x9c>
 4b0:	91 50       	subi	r25, 0x01	; 1
 4b2:	a1 f0       	breq	.+40     	; 0x4dc <__addsf3x+0x9a>
 4b4:	ff 0f       	add	r31, r31
 4b6:	bb 1f       	adc	r27, r27
 4b8:	66 1f       	adc	r22, r22
 4ba:	77 1f       	adc	r23, r23
 4bc:	88 1f       	adc	r24, r24
 4be:	c2 f7       	brpl	.-16     	; 0x4b0 <__addsf3x+0x6e>
 4c0:	0e c0       	rjmp	.+28     	; 0x4de <__addsf3x+0x9c>
 4c2:	ba 0f       	add	r27, r26
 4c4:	62 1f       	adc	r22, r18
 4c6:	73 1f       	adc	r23, r19
 4c8:	84 1f       	adc	r24, r20
 4ca:	48 f4       	brcc	.+18     	; 0x4de <__addsf3x+0x9c>
 4cc:	87 95       	ror	r24
 4ce:	77 95       	ror	r23
 4d0:	67 95       	ror	r22
 4d2:	b7 95       	ror	r27
 4d4:	f7 95       	ror	r31
 4d6:	9e 3f       	cpi	r25, 0xFE	; 254
 4d8:	08 f0       	brcs	.+2      	; 0x4dc <__addsf3x+0x9a>
 4da:	b0 cf       	rjmp	.-160    	; 0x43c <__addsf3+0x28>
 4dc:	93 95       	inc	r25
 4de:	88 0f       	add	r24, r24
 4e0:	08 f0       	brcs	.+2      	; 0x4e4 <__addsf3x+0xa2>
 4e2:	99 27       	eor	r25, r25
 4e4:	ee 0f       	add	r30, r30
 4e6:	97 95       	ror	r25
 4e8:	87 95       	ror	r24
 4ea:	08 95       	ret

000004ec <__divsf3>:
 4ec:	0e 94 8a 02 	call	0x514	; 0x514 <__divsf3x>
 4f0:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__fp_round>
 4f4:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <__fp_pscB>
 4f8:	58 f0       	brcs	.+22     	; 0x510 <__divsf3+0x24>
 4fa:	0e 94 64 03 	call	0x6c8	; 0x6c8 <__fp_pscA>
 4fe:	40 f0       	brcs	.+16     	; 0x510 <__divsf3+0x24>
 500:	29 f4       	brne	.+10     	; 0x50c <__divsf3+0x20>
 502:	5f 3f       	cpi	r21, 0xFF	; 255
 504:	29 f0       	breq	.+10     	; 0x510 <__divsf3+0x24>
 506:	0c 94 5b 03 	jmp	0x6b6	; 0x6b6 <__fp_inf>
 50a:	51 11       	cpse	r21, r1
 50c:	0c 94 a6 03 	jmp	0x74c	; 0x74c <__fp_szero>
 510:	0c 94 61 03 	jmp	0x6c2	; 0x6c2 <__fp_nan>

00000514 <__divsf3x>:
 514:	0e 94 83 03 	call	0x706	; 0x706 <__fp_split3>
 518:	68 f3       	brcs	.-38     	; 0x4f4 <__divsf3+0x8>

0000051a <__divsf3_pse>:
 51a:	99 23       	and	r25, r25
 51c:	b1 f3       	breq	.-20     	; 0x50a <__divsf3+0x1e>
 51e:	55 23       	and	r21, r21
 520:	91 f3       	breq	.-28     	; 0x506 <__divsf3+0x1a>
 522:	95 1b       	sub	r25, r21
 524:	55 0b       	sbc	r21, r21
 526:	bb 27       	eor	r27, r27
 528:	aa 27       	eor	r26, r26
 52a:	62 17       	cp	r22, r18
 52c:	73 07       	cpc	r23, r19
 52e:	84 07       	cpc	r24, r20
 530:	38 f0       	brcs	.+14     	; 0x540 <__divsf3_pse+0x26>
 532:	9f 5f       	subi	r25, 0xFF	; 255
 534:	5f 4f       	sbci	r21, 0xFF	; 255
 536:	22 0f       	add	r18, r18
 538:	33 1f       	adc	r19, r19
 53a:	44 1f       	adc	r20, r20
 53c:	aa 1f       	adc	r26, r26
 53e:	a9 f3       	breq	.-22     	; 0x52a <__divsf3_pse+0x10>
 540:	35 d0       	rcall	.+106    	; 0x5ac <__divsf3_pse+0x92>
 542:	0e 2e       	mov	r0, r30
 544:	3a f0       	brmi	.+14     	; 0x554 <__divsf3_pse+0x3a>
 546:	e0 e8       	ldi	r30, 0x80	; 128
 548:	32 d0       	rcall	.+100    	; 0x5ae <__divsf3_pse+0x94>
 54a:	91 50       	subi	r25, 0x01	; 1
 54c:	50 40       	sbci	r21, 0x00	; 0
 54e:	e6 95       	lsr	r30
 550:	00 1c       	adc	r0, r0
 552:	ca f7       	brpl	.-14     	; 0x546 <__divsf3_pse+0x2c>
 554:	2b d0       	rcall	.+86     	; 0x5ac <__divsf3_pse+0x92>
 556:	fe 2f       	mov	r31, r30
 558:	29 d0       	rcall	.+82     	; 0x5ac <__divsf3_pse+0x92>
 55a:	66 0f       	add	r22, r22
 55c:	77 1f       	adc	r23, r23
 55e:	88 1f       	adc	r24, r24
 560:	bb 1f       	adc	r27, r27
 562:	26 17       	cp	r18, r22
 564:	37 07       	cpc	r19, r23
 566:	48 07       	cpc	r20, r24
 568:	ab 07       	cpc	r26, r27
 56a:	b0 e8       	ldi	r27, 0x80	; 128
 56c:	09 f0       	breq	.+2      	; 0x570 <__divsf3_pse+0x56>
 56e:	bb 0b       	sbc	r27, r27
 570:	80 2d       	mov	r24, r0
 572:	bf 01       	movw	r22, r30
 574:	ff 27       	eor	r31, r31
 576:	93 58       	subi	r25, 0x83	; 131
 578:	5f 4f       	sbci	r21, 0xFF	; 255
 57a:	3a f0       	brmi	.+14     	; 0x58a <__divsf3_pse+0x70>
 57c:	9e 3f       	cpi	r25, 0xFE	; 254
 57e:	51 05       	cpc	r21, r1
 580:	78 f0       	brcs	.+30     	; 0x5a0 <__divsf3_pse+0x86>
 582:	0c 94 5b 03 	jmp	0x6b6	; 0x6b6 <__fp_inf>
 586:	0c 94 a6 03 	jmp	0x74c	; 0x74c <__fp_szero>
 58a:	5f 3f       	cpi	r21, 0xFF	; 255
 58c:	e4 f3       	brlt	.-8      	; 0x586 <__divsf3_pse+0x6c>
 58e:	98 3e       	cpi	r25, 0xE8	; 232
 590:	d4 f3       	brlt	.-12     	; 0x586 <__divsf3_pse+0x6c>
 592:	86 95       	lsr	r24
 594:	77 95       	ror	r23
 596:	67 95       	ror	r22
 598:	b7 95       	ror	r27
 59a:	f7 95       	ror	r31
 59c:	9f 5f       	subi	r25, 0xFF	; 255
 59e:	c9 f7       	brne	.-14     	; 0x592 <__divsf3_pse+0x78>
 5a0:	88 0f       	add	r24, r24
 5a2:	91 1d       	adc	r25, r1
 5a4:	96 95       	lsr	r25
 5a6:	87 95       	ror	r24
 5a8:	97 f9       	bld	r25, 7
 5aa:	08 95       	ret
 5ac:	e1 e0       	ldi	r30, 0x01	; 1
 5ae:	66 0f       	add	r22, r22
 5b0:	77 1f       	adc	r23, r23
 5b2:	88 1f       	adc	r24, r24
 5b4:	bb 1f       	adc	r27, r27
 5b6:	62 17       	cp	r22, r18
 5b8:	73 07       	cpc	r23, r19
 5ba:	84 07       	cpc	r24, r20
 5bc:	ba 07       	cpc	r27, r26
 5be:	20 f0       	brcs	.+8      	; 0x5c8 <__divsf3_pse+0xae>
 5c0:	62 1b       	sub	r22, r18
 5c2:	73 0b       	sbc	r23, r19
 5c4:	84 0b       	sbc	r24, r20
 5c6:	ba 0b       	sbc	r27, r26
 5c8:	ee 1f       	adc	r30, r30
 5ca:	88 f7       	brcc	.-30     	; 0x5ae <__divsf3_pse+0x94>
 5cc:	e0 95       	com	r30
 5ce:	08 95       	ret

000005d0 <__fixsfsi>:
 5d0:	0e 94 ef 02 	call	0x5de	; 0x5de <__fixunssfsi>
 5d4:	68 94       	set
 5d6:	b1 11       	cpse	r27, r1
 5d8:	0c 94 a6 03 	jmp	0x74c	; 0x74c <__fp_szero>
 5dc:	08 95       	ret

000005de <__fixunssfsi>:
 5de:	0e 94 8b 03 	call	0x716	; 0x716 <__fp_splitA>
 5e2:	88 f0       	brcs	.+34     	; 0x606 <__fixunssfsi+0x28>
 5e4:	9f 57       	subi	r25, 0x7F	; 127
 5e6:	98 f0       	brcs	.+38     	; 0x60e <__fixunssfsi+0x30>
 5e8:	b9 2f       	mov	r27, r25
 5ea:	99 27       	eor	r25, r25
 5ec:	b7 51       	subi	r27, 0x17	; 23
 5ee:	b0 f0       	brcs	.+44     	; 0x61c <__fixunssfsi+0x3e>
 5f0:	e1 f0       	breq	.+56     	; 0x62a <__fixunssfsi+0x4c>
 5f2:	66 0f       	add	r22, r22
 5f4:	77 1f       	adc	r23, r23
 5f6:	88 1f       	adc	r24, r24
 5f8:	99 1f       	adc	r25, r25
 5fa:	1a f0       	brmi	.+6      	; 0x602 <__fixunssfsi+0x24>
 5fc:	ba 95       	dec	r27
 5fe:	c9 f7       	brne	.-14     	; 0x5f2 <__fixunssfsi+0x14>
 600:	14 c0       	rjmp	.+40     	; 0x62a <__fixunssfsi+0x4c>
 602:	b1 30       	cpi	r27, 0x01	; 1
 604:	91 f0       	breq	.+36     	; 0x62a <__fixunssfsi+0x4c>
 606:	0e 94 a5 03 	call	0x74a	; 0x74a <__fp_zero>
 60a:	b1 e0       	ldi	r27, 0x01	; 1
 60c:	08 95       	ret
 60e:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__fp_zero>
 612:	67 2f       	mov	r22, r23
 614:	78 2f       	mov	r23, r24
 616:	88 27       	eor	r24, r24
 618:	b8 5f       	subi	r27, 0xF8	; 248
 61a:	39 f0       	breq	.+14     	; 0x62a <__fixunssfsi+0x4c>
 61c:	b9 3f       	cpi	r27, 0xF9	; 249
 61e:	cc f3       	brlt	.-14     	; 0x612 <__fixunssfsi+0x34>
 620:	86 95       	lsr	r24
 622:	77 95       	ror	r23
 624:	67 95       	ror	r22
 626:	b3 95       	inc	r27
 628:	d9 f7       	brne	.-10     	; 0x620 <__fixunssfsi+0x42>
 62a:	3e f4       	brtc	.+14     	; 0x63a <__fixunssfsi+0x5c>
 62c:	90 95       	com	r25
 62e:	80 95       	com	r24
 630:	70 95       	com	r23
 632:	61 95       	neg	r22
 634:	7f 4f       	sbci	r23, 0xFF	; 255
 636:	8f 4f       	sbci	r24, 0xFF	; 255
 638:	9f 4f       	sbci	r25, 0xFF	; 255
 63a:	08 95       	ret

0000063c <__floatunsisf>:
 63c:	e8 94       	clt
 63e:	09 c0       	rjmp	.+18     	; 0x652 <__floatsisf+0x12>

00000640 <__floatsisf>:
 640:	97 fb       	bst	r25, 7
 642:	3e f4       	brtc	.+14     	; 0x652 <__floatsisf+0x12>
 644:	90 95       	com	r25
 646:	80 95       	com	r24
 648:	70 95       	com	r23
 64a:	61 95       	neg	r22
 64c:	7f 4f       	sbci	r23, 0xFF	; 255
 64e:	8f 4f       	sbci	r24, 0xFF	; 255
 650:	9f 4f       	sbci	r25, 0xFF	; 255
 652:	99 23       	and	r25, r25
 654:	a9 f0       	breq	.+42     	; 0x680 <__floatsisf+0x40>
 656:	f9 2f       	mov	r31, r25
 658:	96 e9       	ldi	r25, 0x96	; 150
 65a:	bb 27       	eor	r27, r27
 65c:	93 95       	inc	r25
 65e:	f6 95       	lsr	r31
 660:	87 95       	ror	r24
 662:	77 95       	ror	r23
 664:	67 95       	ror	r22
 666:	b7 95       	ror	r27
 668:	f1 11       	cpse	r31, r1
 66a:	f8 cf       	rjmp	.-16     	; 0x65c <__floatsisf+0x1c>
 66c:	fa f4       	brpl	.+62     	; 0x6ac <__floatsisf+0x6c>
 66e:	bb 0f       	add	r27, r27
 670:	11 f4       	brne	.+4      	; 0x676 <__floatsisf+0x36>
 672:	60 ff       	sbrs	r22, 0
 674:	1b c0       	rjmp	.+54     	; 0x6ac <__floatsisf+0x6c>
 676:	6f 5f       	subi	r22, 0xFF	; 255
 678:	7f 4f       	sbci	r23, 0xFF	; 255
 67a:	8f 4f       	sbci	r24, 0xFF	; 255
 67c:	9f 4f       	sbci	r25, 0xFF	; 255
 67e:	16 c0       	rjmp	.+44     	; 0x6ac <__floatsisf+0x6c>
 680:	88 23       	and	r24, r24
 682:	11 f0       	breq	.+4      	; 0x688 <__floatsisf+0x48>
 684:	96 e9       	ldi	r25, 0x96	; 150
 686:	11 c0       	rjmp	.+34     	; 0x6aa <__floatsisf+0x6a>
 688:	77 23       	and	r23, r23
 68a:	21 f0       	breq	.+8      	; 0x694 <__floatsisf+0x54>
 68c:	9e e8       	ldi	r25, 0x8E	; 142
 68e:	87 2f       	mov	r24, r23
 690:	76 2f       	mov	r23, r22
 692:	05 c0       	rjmp	.+10     	; 0x69e <__floatsisf+0x5e>
 694:	66 23       	and	r22, r22
 696:	71 f0       	breq	.+28     	; 0x6b4 <__floatsisf+0x74>
 698:	96 e8       	ldi	r25, 0x86	; 134
 69a:	86 2f       	mov	r24, r22
 69c:	70 e0       	ldi	r23, 0x00	; 0
 69e:	60 e0       	ldi	r22, 0x00	; 0
 6a0:	2a f0       	brmi	.+10     	; 0x6ac <__floatsisf+0x6c>
 6a2:	9a 95       	dec	r25
 6a4:	66 0f       	add	r22, r22
 6a6:	77 1f       	adc	r23, r23
 6a8:	88 1f       	adc	r24, r24
 6aa:	da f7       	brpl	.-10     	; 0x6a2 <__floatsisf+0x62>
 6ac:	88 0f       	add	r24, r24
 6ae:	96 95       	lsr	r25
 6b0:	87 95       	ror	r24
 6b2:	97 f9       	bld	r25, 7
 6b4:	08 95       	ret

000006b6 <__fp_inf>:
 6b6:	97 f9       	bld	r25, 7
 6b8:	9f 67       	ori	r25, 0x7F	; 127
 6ba:	80 e8       	ldi	r24, 0x80	; 128
 6bc:	70 e0       	ldi	r23, 0x00	; 0
 6be:	60 e0       	ldi	r22, 0x00	; 0
 6c0:	08 95       	ret

000006c2 <__fp_nan>:
 6c2:	9f ef       	ldi	r25, 0xFF	; 255
 6c4:	80 ec       	ldi	r24, 0xC0	; 192
 6c6:	08 95       	ret

000006c8 <__fp_pscA>:
 6c8:	00 24       	eor	r0, r0
 6ca:	0a 94       	dec	r0
 6cc:	16 16       	cp	r1, r22
 6ce:	17 06       	cpc	r1, r23
 6d0:	18 06       	cpc	r1, r24
 6d2:	09 06       	cpc	r0, r25
 6d4:	08 95       	ret

000006d6 <__fp_pscB>:
 6d6:	00 24       	eor	r0, r0
 6d8:	0a 94       	dec	r0
 6da:	12 16       	cp	r1, r18
 6dc:	13 06       	cpc	r1, r19
 6de:	14 06       	cpc	r1, r20
 6e0:	05 06       	cpc	r0, r21
 6e2:	08 95       	ret

000006e4 <__fp_round>:
 6e4:	09 2e       	mov	r0, r25
 6e6:	03 94       	inc	r0
 6e8:	00 0c       	add	r0, r0
 6ea:	11 f4       	brne	.+4      	; 0x6f0 <__fp_round+0xc>
 6ec:	88 23       	and	r24, r24
 6ee:	52 f0       	brmi	.+20     	; 0x704 <__fp_round+0x20>
 6f0:	bb 0f       	add	r27, r27
 6f2:	40 f4       	brcc	.+16     	; 0x704 <__fp_round+0x20>
 6f4:	bf 2b       	or	r27, r31
 6f6:	11 f4       	brne	.+4      	; 0x6fc <__fp_round+0x18>
 6f8:	60 ff       	sbrs	r22, 0
 6fa:	04 c0       	rjmp	.+8      	; 0x704 <__fp_round+0x20>
 6fc:	6f 5f       	subi	r22, 0xFF	; 255
 6fe:	7f 4f       	sbci	r23, 0xFF	; 255
 700:	8f 4f       	sbci	r24, 0xFF	; 255
 702:	9f 4f       	sbci	r25, 0xFF	; 255
 704:	08 95       	ret

00000706 <__fp_split3>:
 706:	57 fd       	sbrc	r21, 7
 708:	90 58       	subi	r25, 0x80	; 128
 70a:	44 0f       	add	r20, r20
 70c:	55 1f       	adc	r21, r21
 70e:	59 f0       	breq	.+22     	; 0x726 <__fp_splitA+0x10>
 710:	5f 3f       	cpi	r21, 0xFF	; 255
 712:	71 f0       	breq	.+28     	; 0x730 <__fp_splitA+0x1a>
 714:	47 95       	ror	r20

00000716 <__fp_splitA>:
 716:	88 0f       	add	r24, r24
 718:	97 fb       	bst	r25, 7
 71a:	99 1f       	adc	r25, r25
 71c:	61 f0       	breq	.+24     	; 0x736 <__fp_splitA+0x20>
 71e:	9f 3f       	cpi	r25, 0xFF	; 255
 720:	79 f0       	breq	.+30     	; 0x740 <__fp_splitA+0x2a>
 722:	87 95       	ror	r24
 724:	08 95       	ret
 726:	12 16       	cp	r1, r18
 728:	13 06       	cpc	r1, r19
 72a:	14 06       	cpc	r1, r20
 72c:	55 1f       	adc	r21, r21
 72e:	f2 cf       	rjmp	.-28     	; 0x714 <__fp_split3+0xe>
 730:	46 95       	lsr	r20
 732:	f1 df       	rcall	.-30     	; 0x716 <__fp_splitA>
 734:	08 c0       	rjmp	.+16     	; 0x746 <__fp_splitA+0x30>
 736:	16 16       	cp	r1, r22
 738:	17 06       	cpc	r1, r23
 73a:	18 06       	cpc	r1, r24
 73c:	99 1f       	adc	r25, r25
 73e:	f1 cf       	rjmp	.-30     	; 0x722 <__fp_splitA+0xc>
 740:	86 95       	lsr	r24
 742:	71 05       	cpc	r23, r1
 744:	61 05       	cpc	r22, r1
 746:	08 94       	sec
 748:	08 95       	ret

0000074a <__fp_zero>:
 74a:	e8 94       	clt

0000074c <__fp_szero>:
 74c:	bb 27       	eor	r27, r27
 74e:	66 27       	eor	r22, r22
 750:	77 27       	eor	r23, r23
 752:	cb 01       	movw	r24, r22
 754:	97 f9       	bld	r25, 7
 756:	08 95       	ret

00000758 <__mulsf3>:
 758:	0e 94 bf 03 	call	0x77e	; 0x77e <__mulsf3x>
 75c:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__fp_round>
 760:	0e 94 64 03 	call	0x6c8	; 0x6c8 <__fp_pscA>
 764:	38 f0       	brcs	.+14     	; 0x774 <__mulsf3+0x1c>
 766:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <__fp_pscB>
 76a:	20 f0       	brcs	.+8      	; 0x774 <__mulsf3+0x1c>
 76c:	95 23       	and	r25, r21
 76e:	11 f0       	breq	.+4      	; 0x774 <__mulsf3+0x1c>
 770:	0c 94 5b 03 	jmp	0x6b6	; 0x6b6 <__fp_inf>
 774:	0c 94 61 03 	jmp	0x6c2	; 0x6c2 <__fp_nan>
 778:	11 24       	eor	r1, r1
 77a:	0c 94 a6 03 	jmp	0x74c	; 0x74c <__fp_szero>

0000077e <__mulsf3x>:
 77e:	0e 94 83 03 	call	0x706	; 0x706 <__fp_split3>
 782:	70 f3       	brcs	.-36     	; 0x760 <__mulsf3+0x8>

00000784 <__mulsf3_pse>:
 784:	95 9f       	mul	r25, r21
 786:	c1 f3       	breq	.-16     	; 0x778 <__mulsf3+0x20>
 788:	95 0f       	add	r25, r21
 78a:	50 e0       	ldi	r21, 0x00	; 0
 78c:	55 1f       	adc	r21, r21
 78e:	62 9f       	mul	r22, r18
 790:	f0 01       	movw	r30, r0
 792:	72 9f       	mul	r23, r18
 794:	bb 27       	eor	r27, r27
 796:	f0 0d       	add	r31, r0
 798:	b1 1d       	adc	r27, r1
 79a:	63 9f       	mul	r22, r19
 79c:	aa 27       	eor	r26, r26
 79e:	f0 0d       	add	r31, r0
 7a0:	b1 1d       	adc	r27, r1
 7a2:	aa 1f       	adc	r26, r26
 7a4:	64 9f       	mul	r22, r20
 7a6:	66 27       	eor	r22, r22
 7a8:	b0 0d       	add	r27, r0
 7aa:	a1 1d       	adc	r26, r1
 7ac:	66 1f       	adc	r22, r22
 7ae:	82 9f       	mul	r24, r18
 7b0:	22 27       	eor	r18, r18
 7b2:	b0 0d       	add	r27, r0
 7b4:	a1 1d       	adc	r26, r1
 7b6:	62 1f       	adc	r22, r18
 7b8:	73 9f       	mul	r23, r19
 7ba:	b0 0d       	add	r27, r0
 7bc:	a1 1d       	adc	r26, r1
 7be:	62 1f       	adc	r22, r18
 7c0:	83 9f       	mul	r24, r19
 7c2:	a0 0d       	add	r26, r0
 7c4:	61 1d       	adc	r22, r1
 7c6:	22 1f       	adc	r18, r18
 7c8:	74 9f       	mul	r23, r20
 7ca:	33 27       	eor	r19, r19
 7cc:	a0 0d       	add	r26, r0
 7ce:	61 1d       	adc	r22, r1
 7d0:	23 1f       	adc	r18, r19
 7d2:	84 9f       	mul	r24, r20
 7d4:	60 0d       	add	r22, r0
 7d6:	21 1d       	adc	r18, r1
 7d8:	82 2f       	mov	r24, r18
 7da:	76 2f       	mov	r23, r22
 7dc:	6a 2f       	mov	r22, r26
 7de:	11 24       	eor	r1, r1
 7e0:	9f 57       	subi	r25, 0x7F	; 127
 7e2:	50 40       	sbci	r21, 0x00	; 0
 7e4:	9a f0       	brmi	.+38     	; 0x80c <__mulsf3_pse+0x88>
 7e6:	f1 f0       	breq	.+60     	; 0x824 <__mulsf3_pse+0xa0>
 7e8:	88 23       	and	r24, r24
 7ea:	4a f0       	brmi	.+18     	; 0x7fe <__mulsf3_pse+0x7a>
 7ec:	ee 0f       	add	r30, r30
 7ee:	ff 1f       	adc	r31, r31
 7f0:	bb 1f       	adc	r27, r27
 7f2:	66 1f       	adc	r22, r22
 7f4:	77 1f       	adc	r23, r23
 7f6:	88 1f       	adc	r24, r24
 7f8:	91 50       	subi	r25, 0x01	; 1
 7fa:	50 40       	sbci	r21, 0x00	; 0
 7fc:	a9 f7       	brne	.-22     	; 0x7e8 <__mulsf3_pse+0x64>
 7fe:	9e 3f       	cpi	r25, 0xFE	; 254
 800:	51 05       	cpc	r21, r1
 802:	80 f0       	brcs	.+32     	; 0x824 <__mulsf3_pse+0xa0>
 804:	0c 94 5b 03 	jmp	0x6b6	; 0x6b6 <__fp_inf>
 808:	0c 94 a6 03 	jmp	0x74c	; 0x74c <__fp_szero>
 80c:	5f 3f       	cpi	r21, 0xFF	; 255
 80e:	e4 f3       	brlt	.-8      	; 0x808 <__mulsf3_pse+0x84>
 810:	98 3e       	cpi	r25, 0xE8	; 232
 812:	d4 f3       	brlt	.-12     	; 0x808 <__mulsf3_pse+0x84>
 814:	86 95       	lsr	r24
 816:	77 95       	ror	r23
 818:	67 95       	ror	r22
 81a:	b7 95       	ror	r27
 81c:	f7 95       	ror	r31
 81e:	e7 95       	ror	r30
 820:	9f 5f       	subi	r25, 0xFF	; 255
 822:	c1 f7       	brne	.-16     	; 0x814 <__mulsf3_pse+0x90>
 824:	fe 2b       	or	r31, r30
 826:	88 0f       	add	r24, r24
 828:	91 1d       	adc	r25, r1
 82a:	96 95       	lsr	r25
 82c:	87 95       	ror	r24
 82e:	97 f9       	bld	r25, 7
 830:	08 95       	ret

00000832 <__divmodhi4>:
 832:	97 fb       	bst	r25, 7
 834:	07 2e       	mov	r0, r23
 836:	16 f4       	brtc	.+4      	; 0x83c <__divmodhi4+0xa>
 838:	00 94       	com	r0
 83a:	07 d0       	rcall	.+14     	; 0x84a <__divmodhi4_neg1>
 83c:	77 fd       	sbrc	r23, 7
 83e:	09 d0       	rcall	.+18     	; 0x852 <__divmodhi4_neg2>
 840:	0e 94 2d 04 	call	0x85a	; 0x85a <__udivmodhi4>
 844:	07 fc       	sbrc	r0, 7
 846:	05 d0       	rcall	.+10     	; 0x852 <__divmodhi4_neg2>
 848:	3e f4       	brtc	.+14     	; 0x858 <__divmodhi4_exit>

0000084a <__divmodhi4_neg1>:
 84a:	90 95       	com	r25
 84c:	81 95       	neg	r24
 84e:	9f 4f       	sbci	r25, 0xFF	; 255
 850:	08 95       	ret

00000852 <__divmodhi4_neg2>:
 852:	70 95       	com	r23
 854:	61 95       	neg	r22
 856:	7f 4f       	sbci	r23, 0xFF	; 255

00000858 <__divmodhi4_exit>:
 858:	08 95       	ret

0000085a <__udivmodhi4>:
 85a:	aa 1b       	sub	r26, r26
 85c:	bb 1b       	sub	r27, r27
 85e:	51 e1       	ldi	r21, 0x11	; 17
 860:	07 c0       	rjmp	.+14     	; 0x870 <__udivmodhi4_ep>

00000862 <__udivmodhi4_loop>:
 862:	aa 1f       	adc	r26, r26
 864:	bb 1f       	adc	r27, r27
 866:	a6 17       	cp	r26, r22
 868:	b7 07       	cpc	r27, r23
 86a:	10 f0       	brcs	.+4      	; 0x870 <__udivmodhi4_ep>
 86c:	a6 1b       	sub	r26, r22
 86e:	b7 0b       	sbc	r27, r23

00000870 <__udivmodhi4_ep>:
 870:	88 1f       	adc	r24, r24
 872:	99 1f       	adc	r25, r25
 874:	5a 95       	dec	r21
 876:	a9 f7       	brne	.-22     	; 0x862 <__udivmodhi4_loop>
 878:	80 95       	com	r24
 87a:	90 95       	com	r25
 87c:	bc 01       	movw	r22, r24
 87e:	cd 01       	movw	r24, r26
 880:	08 95       	ret

00000882 <itoa>:
 882:	45 32       	cpi	r20, 0x25	; 37
 884:	51 05       	cpc	r21, r1
 886:	20 f4       	brcc	.+8      	; 0x890 <itoa+0xe>
 888:	42 30       	cpi	r20, 0x02	; 2
 88a:	10 f0       	brcs	.+4      	; 0x890 <itoa+0xe>
 88c:	0c 94 4c 04 	jmp	0x898	; 0x898 <__itoa_ncheck>
 890:	fb 01       	movw	r30, r22
 892:	10 82       	st	Z, r1
 894:	cb 01       	movw	r24, r22
 896:	08 95       	ret

00000898 <__itoa_ncheck>:
 898:	bb 27       	eor	r27, r27
 89a:	4a 30       	cpi	r20, 0x0A	; 10
 89c:	31 f4       	brne	.+12     	; 0x8aa <__itoa_ncheck+0x12>
 89e:	99 23       	and	r25, r25
 8a0:	22 f4       	brpl	.+8      	; 0x8aa <__itoa_ncheck+0x12>
 8a2:	bd e2       	ldi	r27, 0x2D	; 45
 8a4:	90 95       	com	r25
 8a6:	81 95       	neg	r24
 8a8:	9f 4f       	sbci	r25, 0xFF	; 255
 8aa:	0c 94 58 04 	jmp	0x8b0	; 0x8b0 <__utoa_common>

000008ae <__utoa_ncheck>:
 8ae:	bb 27       	eor	r27, r27

000008b0 <__utoa_common>:
 8b0:	fb 01       	movw	r30, r22
 8b2:	55 27       	eor	r21, r21
 8b4:	aa 27       	eor	r26, r26
 8b6:	88 0f       	add	r24, r24
 8b8:	99 1f       	adc	r25, r25
 8ba:	aa 1f       	adc	r26, r26
 8bc:	a4 17       	cp	r26, r20
 8be:	10 f0       	brcs	.+4      	; 0x8c4 <__utoa_common+0x14>
 8c0:	a4 1b       	sub	r26, r20
 8c2:	83 95       	inc	r24
 8c4:	50 51       	subi	r21, 0x10	; 16
 8c6:	b9 f7       	brne	.-18     	; 0x8b6 <__utoa_common+0x6>
 8c8:	a0 5d       	subi	r26, 0xD0	; 208
 8ca:	aa 33       	cpi	r26, 0x3A	; 58
 8cc:	08 f0       	brcs	.+2      	; 0x8d0 <__utoa_common+0x20>
 8ce:	a9 5d       	subi	r26, 0xD9	; 217
 8d0:	a1 93       	st	Z+, r26
 8d2:	00 97       	sbiw	r24, 0x00	; 0
 8d4:	79 f7       	brne	.-34     	; 0x8b4 <__utoa_common+0x4>
 8d6:	b1 11       	cpse	r27, r1
 8d8:	b1 93       	st	Z+, r27
 8da:	11 92       	st	Z+, r1
 8dc:	cb 01       	movw	r24, r22
 8de:	0c 94 71 04 	jmp	0x8e2	; 0x8e2 <strrev>

000008e2 <strrev>:
 8e2:	dc 01       	movw	r26, r24
 8e4:	fc 01       	movw	r30, r24
 8e6:	67 2f       	mov	r22, r23
 8e8:	71 91       	ld	r23, Z+
 8ea:	77 23       	and	r23, r23
 8ec:	e1 f7       	brne	.-8      	; 0x8e6 <strrev+0x4>
 8ee:	32 97       	sbiw	r30, 0x02	; 2
 8f0:	04 c0       	rjmp	.+8      	; 0x8fa <strrev+0x18>
 8f2:	7c 91       	ld	r23, X
 8f4:	6d 93       	st	X+, r22
 8f6:	70 83       	st	Z, r23
 8f8:	62 91       	ld	r22, -Z
 8fa:	ae 17       	cp	r26, r30
 8fc:	bf 07       	cpc	r27, r31
 8fe:	c8 f3       	brcs	.-14     	; 0x8f2 <strrev+0x10>
 900:	08 95       	ret

00000902 <_exit>:
 902:	f8 94       	cli

00000904 <__stop_program>:
 904:	ff cf       	rjmp	.-2      	; 0x904 <__stop_program>
